package frontend;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

<<<<<<< HEAD
import javafx.scene.Scene;
=======
import backend.Airport;
import backend.Coordinate;
import backend.Intersection;
import backend.Plane;
import backend.Route;
import backend.Segment;
import javafx.event.EventHandler;
>>>>>>> ce6ac478bce55a3e9749bd00988eb869303b254f
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Rectangle;

/**
 * 
 * @author EllenWei, Shiyao Wu
 *
 */
public class MapPane extends Pane{
<<<<<<< HEAD
	
	GUIAirport guiAirport;
	// store all GUI planes on the map
	List<Label>planeList = new ArrayList<>();
	List<Rectangle>segmentList = new ArrayList<>();
	
	public MapPane(GUIAirport ga){
		this.guiAirport = ga;
		this.setPrefSize(1000, 600);
		Image backgroundImage = new Image("map.png");
		ImageView iv1 = new ImageView();
        iv1.setImage(backgroundImage);
        iv1.setFitWidth(1000);
        iv1.setPreserveRatio(true);
   
		HBox h1 = new HBox();
		h1.getChildren().add(iv1);
		getChildren().add(h1);
		
		Canvas mapCanvas = new Canvas(1000,600);
		GraphicsContext gc = mapCanvas.getGraphicsContext2D();
		Image planeImg = new Image("plane.png", 70, 70, true, true);
		gc.drawImage(planeImg, 100, 400);
		System.out.println("Is loaded: " + planeImg.isError());
		getChildren().add(mapCanvas);
		
		
//		for(Label planeLabel: planeList){
//			// TODO: display all planes
//			// set the mouse clicked event
//			planeLabel.setOnMouseClicked((event)-> {
//				//TODO: set the selected plane color
//				this.guiAirport.setCurrentPlane();
//			});
//		}
		
		
	}	
}
=======
 
 double planeX;
 double planeY;
 GUIAirport guiAirport;
 GUIPlane g_plane;
 // store all GUI planes on the map
 List<Label>planeList = new ArrayList<>();
 List<Rectangle>segmentList = new ArrayList<>();
 Image planeImgNormal = new Image("plane.png", 35, 35, true, true);
 Image planeImgHighlighted = new Image("plane_white.png", 35, 35, true, true);
 
 public MapPane(GUIAirport ga){
  this.guiAirport = ga;
  this.setPrefSize(1000, 600);
  Image backgroundImage = new Image("map.png");
  ImageView iv1 = new ImageView(backgroundImage);
  iv1.setFitWidth(1000);
  iv1.setPreserveRatio(true);
  
  Canvas mapCanvas = new Canvas(1000,600);
  GraphicsContext gc = mapCanvas.getGraphicsContext2D();
  
  // Assume we got a GUIplane object here by calling a function in GUIAirport
  GUICoordinate coordinate = new GUICoordinate();
  coordinate.setCoordinate(288,405);
  g_plane = new GUIPlane(coordinate, new Plane(null, null, null, 0, 0, null), ga);
 
  drawPlane(gc, g_plane);
  
  ArrayList<GUICoordinate> coordList = new ArrayList<GUICoordinate>();
  Coordinate c1 = new Coordinate(33.935242,-118.411916);
  Coordinate c2 = new Coordinate(33.935411,-118.411025);
  Coordinate c3 = new Coordinate(33.934993,-118.408687);
  Coordinate c4 = new Coordinate(33.934788,-118.411015);
  coordList.add(c1.getGUICoordinate());
  coordList.add(c2.getGUICoordinate());
  coordList.add(c3.getGUICoordinate());
  coordList.add(c4.getGUICoordinate());
  System.out.println("X; " + c1.getGUICoordinate().getCoordinateX() + "Y: " + c1.getGUICoordinate().getCoordinateY());
  System.out.println("X; " + c2.getGUICoordinate().getCoordinateX() + "Y: " + c2.getGUICoordinate().getCoordinateY());
  System.out.println("X; " + c3.getGUICoordinate().getCoordinateX() + "Y: " + c3.getGUICoordinate().getCoordinateY());
  System.out.println("X; " + c4.getGUICoordinate().getCoordinateX() + "Y: " + c4.getGUICoordinate().getCoordinateY());
  
  //GUISegment guiSeg = new GUISegment(coordList);
  //getChildren().add(guiSeg);
 
  getChildren().addAll(mapCanvas, iv1, g_plane);
    
  g_plane.setOnMouseClicked((event) -> {
	  g_plane.toggleSelection();
	  drawPlane(gc, g_plane);
	  //ArrayList<Route> routes = guiAirport.touchPlane(g_plane);
	  
	  //display plane information
	  
	  // TODO Display all these routes
//	  for(Route route: routes){
//		  System.out.println("route: " );
//		  ArrayList<Segment> segments = route.getRoute();
//		  System.out.println("size: " + segments.size());
//		  for(Segment seg: segments){
//			  if(seg.getIntersection()){
//				  GUIIntersection gint = new GUIIntersection((Intersection) seg);
//				  getChildren().add(gint);
//			  } else {
//				  GUISegment gseg = new GUISegment(seg);
//				  getChildren().add(gseg);
//			  }
//		  }
//	  }
	  Route route = Airport.getRoute("T67R2-B");
	  ArrayList<Segment> segments = route.getOriginalRoute();
	  for(Segment seg: segments){
		  if(seg.getIntersection()){
			  GUIIntersection gint = new GUIIntersection((Intersection) seg);
			  getChildren().add(gint);
		  } else {
			  GUISegment gseg = new GUISegment(seg);
			  getChildren().add(gseg);
		  }
	  }
	  
	  
  });
  
//  for(GUISegment g: guiAirport.getGuiSegments()) {
//		 getChildren().add(g);
//  }
//  for(GUIIntersection g: guiAirport.getGuiIntersections()) {
//		 getChildren().add(g);
//  }
  
 } 
 
 public void drawPlane(GraphicsContext gc, GUIPlane g_plane)
 {	 
	 if(g_plane.getIsHighlighted())
	 {
		 g_plane.setImage(planeImgHighlighted);
	 }
	 else
	 {
		 g_plane.setImage(planeImgNormal);
	 }
	 
	 gc.drawImage(g_plane.getImage(), g_plane.getLocation().getCoordinateX(),
			 g_plane.getLocation().getCoordinateY());
	 g_plane.setX(g_plane.getLocation().getCoordinateX());
	 g_plane.setY(g_plane.getLocation().getCoordinateY());
 }
 
 private void installEventHandler() {
		GUIPlane plane = this.g_plane;
		planeX = this.g_plane.getX();
		planeY = this.g_plane.getY();
		int delta = 10;
		
	  	// Deal with key press for now.			
		this.setOnKeyPressed(new EventHandler<KeyEvent>() {
	        public void handle(final KeyEvent keyEvent) {            	
	            if (keyEvent.getCode() == KeyCode.RIGHT) {
	            	planeX += delta;
	            	updatePlaneView();
	                keyEvent.consume();
	            }
	            if (keyEvent.getCode() == KeyCode.LEFT) {
	            	planeX -= delta;
	            	updatePlaneView();
	                keyEvent.consume();
	            }
	            if (keyEvent.getCode() == KeyCode.UP) {
	            	planeY -= delta;
	            	updatePlaneView();
	                keyEvent.consume();
	            }
	            if (keyEvent.getCode() == KeyCode.DOWN) {
	            	planeY += delta;
	            	updatePlaneView();
	                keyEvent.consume();
	            }
	        }
	        
	        private void updatePlaneView() {
	        	plane.setX(planeX);
	        	plane.setY(planeY);
	        }
	  	});
	  	
	  	// This is needed for some reason.
	  	this.setFocusTraversable(true);
	}
}
>>>>>>> ce6ac478bce55a3e9749bd00988eb869303b254f
