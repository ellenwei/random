package twoSigma;

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

public class ReversePolishNotation {
	interface Token{
		Stack execute(Stack stack);
		
	}
	
	// Use for digit
	class Operand implements Token{
		Double value;
		
		public Operand(double value){
			this.value = value;
		}
		
		@Override
		public Stack execute(Stack stack){
			stack.push(value);
			return stack;
		}
	}
	
	interface Operator extends Token{}
	
	class Add implements Operator{
		@SuppressWarnings("unchecked")
		@Override
		public Stack execute(Stack stack){
			if(!stack.isEmpty()){
				stack.push((Double)stack.pop()+(Double)stack.pop());
			}
			return stack;
		}
	}
	
	class Substract implements Operator{
		@Override
		public Stack execute(Stack stack){
			if(!stack.isEmpty()){
				Double num2 = (Double) stack.pop();
				Double num1 = (Double) stack.pop();
				stack.push(num1-num2);
			}
			return stack;
		}
	}
	
	class Multiply implements Operator{
		@Override
		public Stack execute(Stack stack){
			if(!stack.isEmpty()){
				stack.push((Double)stack.pop()*(Double)stack.pop());
			}
			return stack;
		}
	}
	
	class Divide implements Operator{
		@Override
		public Stack execute(Stack stack){
			if(!stack.isEmpty()){
				Double num2 = (Double)stack.pop();
				Double num1 = (Double)stack.pop();
				stack.push(num1/num2);
			}
			return stack;
		}
	}
	
	public class Calculator{
		Map<String, Token> tokens = new HashMap<>();
		
		{
			tokens.put("+", new Add());
			tokens.put("-", new Substract());
			tokens.put("*", new Multiply());
			tokens.put("/", new Divide());
		}
		
		protected Token createToken(String s){
			Token token = tokens.get(s);
			if(token == null){
				token = new Operand(Double.valueOf(s));
			}
			return token;
		}
		
		
	}
}
